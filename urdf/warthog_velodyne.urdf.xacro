<?xml version='1.0'?>

<robot name="warthog" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="PI" value="3.1415926535897931"/>

  <xacro:property name="wheel_radius" value="0.3" />
  <xacro:property name="wheel_width" value="0.25" />
  <xacro:property name="wheel_mass" value="15" />
  <xacro:property name="wheel_to_track_ratio" value="0.5962" />

  <xacro:property name="axle_x_offset" value="0.457367" />
  <xacro:property name="axle_y_offset" value="0.0" />
  <xacro:property name="axle_z_offset" value="-0.012977" />

  <xacro:property name="diff_unit_length" value="1.34" />
  <xacro:property name="diff_unit_width" value="0.28" />
  <xacro:property name="diff_unit_height" value="0.63"/>
  <xacro:property name="diff_unit_mass" value="50" />

  <xacro:property name="diff_unit_offset_x" value="0.00" />
  <xacro:property name="diff_unit_offset_y" value="0.56821" />
  <xacro:property name="diff_unit_offset_z" value="0.0" />

  <xacro:property name="chassis_length" value="1.35" />
  <xacro:property name="chassis_width" value="0.70" />
  <xacro:property name="chassis_height" value="0.30" />
  <xacro:property name="chassis_mass" value="100" />

  <xacro:property name="dummy_inertia" value="1e-09"/>

  <xacro:macro name="wheel_inertia" params="m r h">
    <inertia ixx="${m*(3*r*r+h*h)/12}" ixy="0" ixz="0"
             iyy="${m*r*r/2}" iyz="0"
             izz="${m*(3*r*r+h*h)/12}" />
  </xacro:macro>

  <xacro:macro name="box_inertia" params="m x y z">
    <inertia ixx="${m*(y*y+z*z)/12}" ixy="0" ixz="0"
             iyy="${m*(x*x+z*z)/12}" iyz="0"
             izz="${m*(x*x+z*z)/12}" />
  </xacro:macro>

  <material name="dark_grey"><color rgba="0.2 0.2 0.2 1.0" /></material>
  <material name="light_grey"><color rgba="0.4 0.4 0.4 1.0" /></material>
  <material name="yellow"><color rgba="0.95 0.816 0.082 1.0" /></material>
  <material name="black"><color rgba="0.15 0.15 0.15 1.0" /></material>
  <material name="white"><color rgba="0.9 0.9 0.9 1.0" /></material>
  <material name="red"><color rgba="0.9 0.0 0.0 1.0" /></material>

  <xacro:macro name="wheel" params="prefix side *joint_pose">
    <link name="${prefix}_${side}_wheel_link">
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <mass value="${wheel_mass}" />
        <xacro:wheel_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${PI/2}"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/wheel.stl" />
        </geometry>
        <material name="dark_grey" />
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}_${side}_wheel_joint" type="continuous">
      <parent link="${side}_diff_unit_link"/>
      <child link="${prefix}_${side}_wheel_link"/>
      <xacro:insert_block name="joint_pose" />
      <axis xyz="0 1 0"/>
    </joint>
    <gazebo reference="${prefix}_${side}_wheel_link">
      <selfCollide>false</selfCollide>
      <mu1>0.5</mu1>
      <mu2>0.5</mu2>
      <kp value="10000000.0" />
      <kd value="1.0" />
      <fdir1 value="1 0 0" />
      <material>Gazebo/Grey</material>
    </gazebo>
    <transmission name="${prefix}_${side}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${prefix}_${side}_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${prefix}_${side}_actuator">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <xacro:macro name="track" params="prefix side *joint_pose">
    <link name="${prefix}_${side}_track_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/tracks.dae" />
        </geometry>
        <material name="dark_grey" />
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/tracks_collision.stl" />
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}_${side}_track_joint" type="fixed">
      <parent link="${side}_diff_unit_link"/>
      <child link="${prefix}_${side}_track_link"/>
      <xacro:insert_block name="joint_pose" />
      <axis xyz="0 1 0"/>
    </joint>

    <!-- This adds wheels that rotate instead of tracks. -->
    <link name="${prefix}_${side}_wheel_link">
      <collision>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius*wheel_to_track_ratio}" length="${wheel_width}"/>
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}_${side}_wheel_joint" type="continuous">
      <parent link="${side}_diff_unit_link"/>
      <child link="${prefix}_${side}_wheel_link"/>
      <xacro:insert_block name="joint_pose" />
      <axis xyz="0 1 0"/>
    </joint>
    <transmission name="${prefix}_${side}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${prefix}_${side}_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${prefix}_${side}_actuator">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>

  <xacro:unless value="$(optenv WARTHOG_TRACKS 0)">
    <xacro:wheel prefix="front" side="left">
      <origin xyz="${axle_x_offset*1} ${axle_y_offset*1} ${axle_z_offset}" rpy="0 0 0" />
    </xacro:wheel>
    <xacro:wheel prefix="front" side="right">
      <origin xyz="${axle_x_offset*1} ${axle_y_offset*-1} ${axle_z_offset}" rpy="0 0 0" />
    </xacro:wheel>
    <xacro:wheel prefix="rear" side="left">
      <origin xyz="${axle_x_offset*-1} ${axle_y_offset*1} ${axle_z_offset}" rpy="0 0 0" />
    </xacro:wheel>
    <xacro:wheel prefix="rear" side="right">
      <origin xyz="${axle_x_offset*-1} ${axle_y_offset*-1} ${axle_z_offset}" rpy="0 0 0" />
    </xacro:wheel>
  </xacro:unless>

  <xacro:if value="$(optenv WARTHOG_TRACKS 0)">
    <xacro:track prefix="front" side="left">
      <origin xyz="${axle_x_offset*1} ${axle_y_offset*1} ${axle_z_offset}" rpy="0 0 0" />
    </xacro:track>
    <xacro:track prefix="front" side="right">
      <origin xyz="${axle_x_offset*1} ${axle_y_offset*-1} ${axle_z_offset}" rpy="0 0 0" />
    </xacro:track>
    <xacro:track prefix="rear" side="left">
      <origin xyz="${axle_x_offset*-1} ${axle_y_offset*1} ${axle_z_offset}" rpy="0 0 ${PI}" />
    </xacro:track>
    <xacro:track prefix="rear" side="right">
      <origin xyz="${axle_x_offset*-1} ${axle_y_offset*-1} ${axle_z_offset}" rpy="0 0 ${PI}" />
    </xacro:track>
  </xacro:if>

  <xacro:macro name="diff_unit" params="prefix side left">
    <link name="${prefix}_diff_unit_link">
      <inertial>
        <origin xyz="0 ${side*-1*0.05} 0.197" rpy="0 0 0"/>
        <mass value="${diff_unit_mass}"/>
        <xacro:box_inertia m="${diff_unit_mass}" x="${diff_unit_length}"
                           y="${diff_unit_width}" z="${diff_unit_height}" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${side*PI/2}"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/rocker.stl" />
        </geometry>
        <material name="black"><color rgba="0.15 0.15 0.15 1.0" /></material>
      </visual>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${side*PI/2}"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/fenders.stl" />
        </geometry>
        <material name="yellow"><color rgba="0.95 0.816 0.082 1.0" /></material>
      </visual>
      <visual>
        <origin xyz="0 ${side*-0.0244} 0" rpy="0 0 0"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/light.stl" />
        </geometry>
        <material name="white"><color rgba="0.9 0.9 0.9 1.0" /></material>
      </visual>
      <visual>
        <origin xyz="0 ${side*-0.0244} 0" rpy="0 0 ${side*PI}"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/light.stl" />
        </geometry>
        <material name="red"><color rgba="0.9 0.0 0.0 1.0" /></material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 ${side*PI/2}"/>
        <geometry>
          <mesh filename="package://warthog_description/meshes/fenders.stl" />
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}_diff_unit_joint" type="revolute">
      <limit upper="0.4" lower="-0.4" effort="100" velocity="1"/>
      <parent link="chassis_link"/>
      <child link="${prefix}_diff_unit_link"/>
      <origin xyz="${diff_unit_offset_x} ${diff_unit_offset_y*side} ${diff_unit_offset_z}" rpy="0 0 0" />
      <axis xyz="0 1 0"/>
      <dynamics damping="100" friction="0.5"/>
    </joint>
    <gazebo reference="${prefix}_diff_unit_link">
      <selfCollide>false</selfCollide>
      <material>Gazebo/Yellow</material>
    </gazebo>
  </xacro:macro>

  <xacro:diff_unit prefix="left" side="1" left="true"/>
  <xacro:diff_unit prefix="right" side="-1" left="false"/>

  <link name="base_link"></link>

  <joint name="base_link_joint" type="fixed">
    <origin xyz="0 0 0.025" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="chassis_link" />
  </joint>

  <link name="chassis_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="${chassis_mass}"/>
      <xacro:box_inertia m="${chassis_mass}" x="${chassis_length}"
                         y="${chassis_width}" z="${chassis_height}" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://warthog_description/meshes/chassis.stl" />
      </geometry>
      <material name="black"><color rgba="0.15 0.15 0.15 1.0" /></material>
    </visual>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://warthog_description/meshes/e-stop.stl" />
      </geometry>
      <material name="red"><color rgba="0.9 0.0 0.0 1.0" /></material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://warthog_description/meshes/chassis-collision.stl" />
      </geometry>
    </collision>
  </link>

  <link name="top_chassis_link"></link>

  <joint name="top_link_joint" type="fixed">
    <origin xyz="0 0 0.27218" rpy="0 0 0" />
    <parent link="chassis_link"/>
    <child link="top_chassis_link" />
  </joint>

  <!-- This link is purely to complete the visual look -->
  <link name="diff_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://warthog_description/meshes/diff-link.stl" />
      </geometry>
      <material name="light_grey" />
    </visual>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://warthog_description/meshes/susp-link.stl" />
      </geometry>
      <material name="light_grey" />
    </visual>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://warthog_description/meshes/susp-link.stl" />
      </geometry>
      <material name="light_grey" />
    </visual>
  </link>
  <joint name="diff_link_joint" type="fixed">
    <parent link="chassis_link"/>
    <child link="diff_link"/>
    <origin xyz="-0.5826 0 0.24979" rpy="0 0 0" />
  </joint>

  <link name="imu_link" />
  <joint name="imu_link_joint" type="fixed">
    <origin xyz="$(optenv WARTHOG_IMU_XYZ 0 0 0)" rpy="$(optenv WARTHOG_IMU_RPY 0 0 0)" />
    <parent link="chassis_link"/>
    <child link="imu_link" />
  </joint>

<!-- LIDAR -->

  <!-- Lidar stand (visual only) -->
  <xacro:property name="lidar_stand_length" value="0.25" /> <!-- Height above top of the robot to mount the Lidar -->
  <xacro:property name="lidar_stand_radius" value="0.051" /> <!-- Height above top of the robot to mount the Lidar -->
  <joint name="lidar_stand_joint" type="fixed">
    <axis xyz="0 0 0" />
    <origin xyz="0 0 ${chassis_height + (lidar_stand_length / 2)}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="lidar_stand_link"/>
  </joint>

  <link name="lidar_stand_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="${lidar_stand_length}" radius="${lidar_stand_radius}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="${lidar_stand_length}" radius="${lidar_stand_radius}"/>
      </geometry>
      <material name="grey">
         <color rgba=".8 .8 .8 1"/>
      </material>
    </visual>

    <inertial>
      <mass value="1" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>

  <VLP-16 parent="base_link" name="velodyne" topic="/velodyne_points" hz="20" samples="1200" gpu="false" lasers="16" max_range="100">
    <!-- This origin is overriden in VLP-16.urdf file -->
    <origin xyz="0 0 0" rpy="0 0 0" />
  </VLP-16>

<!-- END LIDAR -->

<!-- CAMERA -->

   <!-- Camera box (just for visual) -->
  <xacro:property name="camera_box" value="0.075" /> <!-- Size of square 'camera' box -->
  <joint name="camera_joint" type="fixed">
    <axis xyz="0 0 0" />
    <origin xyz="${(chassis_length / 2) - (camera_box / 2) - 0.02 + 0.1} 0 ${chassis_height + (camera_box / 2) - 0.01}" rpy="0 3.141592654 3.141592654"/>
    <parent link="base_link"/>
    <child link="camera_link"/>
  </joint>

  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_box / 2} ${camera_box} ${camera_box}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_box / 2} ${camera_box} ${camera_box}"/>
      </geometry>
      <material name="red">
         <color rgba=".8 0 0 1"/>
      </material>
    </visual>

    <inertial>
      <mass value="1" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>

  <!-- Actual camera reading -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
	<!-- Tweak these parameters for the specs of your desired camera -->
        <horizontal_fov>1.4</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
	<!-- Name of the camera (for RVIZ) -->
        <cameraName>warthog/camera1</cameraName>
	<!-- ROS topic to publish images -->
        <imageTopicName>image_raw</imageTopicName>
	<!-- ROS topic to publis camera info -->
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

<!-- END CAMERA -->

  <!-- Bring in simulation data for Gazebo. -->
  <xacro:include filename="$(find warthog_description)/urdf/warthog.gazebo" />

  <xacro:include filename="$(find warthog_velodyne)/urdf/VLP-16.urdf"/> 

  <!-- Optional standard accessories, including their simulation data. The rendering
       of these into the final description is controlled by optenv variables, which
       default each one to off.-->
  <xacro:include filename="$(find warthog_description)/urdf/accessories.urdf.xacro" />

  <!-- Optional custom includes. -->
  <xacro:include filename="$(optenv WARTHOG_URDF_EXTRAS empty.urdf)" />
</robot>
